
###################
#   trace start   #
###################
# PS4=$'%D{%s%6.}-_-'
# exec 3>&2 2>/tmp/sample-time.$$.log
# zmodload zsh/zprof
# setopt xtrace prompt_subst

HOME=${HOME:-'{{ .chezmoi.homeDir }}'}
echo "Don't forget about: (hg fd btop)"

# Set up ZNAP
# mkdir ~/.zsh-snap/ && git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/.zsh-snap/
MCFLY_HISTORY_LIMIT=10000
export MCFLY_RESULTS_SORT=LAST_RUN
MAGIC_ENTER_GIT_COMMAND='git status -u .'
MAGIC_ENTER_OTHER_COMMAND='ls -lh .'
zstyle ':znap:*' repos-dir ~/.znap
source ~/.zsh-snap/znap.zsh
znap eval starship 'starship init zsh --print-full-init'
znap prompt
znap eval mcfly 'mcfly init zsh'
znap source jessarcher/zsh-artisan
znap source zsh-users/zsh-syntax-highlighting
znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-completions
znap source ohmyzsh/ohmyzsh plugins/magic-enter
znap source zshzoo/terminal
zstyle ':zshzoo:terminal' auto-title 'yes'

# Set up Path
export PATH=/usr/local/sbin:/usr/local/bin:$HOME/.config/composer/vendor/bin:$HOME/Library/Android/sdk/platform-tools/:$PATH

# Homebrew on M1
if [ -f /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Terminal
export QUOTING_STYLE=literal

# Set up GPG
export GPG_TTY=`tty`

# Lazy Load NPM
# http://broken-by.me/lazy-load-nvm/
lazynvm() {
  unset -f nvm node npm npx
  export NVM_DIR=~/.nvm
  [ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh" # This loads nvm
  if [ -f "$NVM_DIR/bash_completion" ]; then
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
  fi
}

nvm() {
  lazynvm
  nvm $@
}

node() {
  lazynvm
  node $@
}

npm() {
  lazynvm
  npm $@
}

npx() {
  lazynvm
  npx $@
}

## Set up autojump `j pro` -> cd /Users/jesse/Projects
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

## Set Python 3 as default
alias python=/usr/local/bin/python3
alias pip=/usr/local/bin/pip3

### Helpers and aliases ###
alias ls="gls --hyperlink=always --color=auto"
alias lls="ls"
alias vs="code"
alias p="cd ~/Projects"
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'
alias a="artisan"
alias tinker="artisan tinker"
alias which="/usr/bin/which"
alias ..="cd .."
alias ...="cd ../.."
function lmk() {
  say "Process complete!"
}

## Open a directory / project in Tinkerwell
function tw {
  if [ $# -eq 0 ] || [ $1 = "." ]; then
    TW_PATH=$(pwd)
  else
    TW_PATH=$1
  fi

  TW_PATH=$(echo -n $TW_PATH | base64)

  open "tinkerwell://?cwd=$TW_PATH"
}

# Kitty Stuff
alias icat="kitty +kitten icat --align=left"
alias kd="kitty +kitten diff"
alias hg='kitty +kitten hyperlinked_grep'
alias ssh="TERM='xterm-256color' ssh"
alias kssh="kitty +kitten ssh"
alias kgd="git difftool --no-symlinks --dir-diff"

#Cloudflare cache clear
clear_cf() {
  declare -A sites
  sites[objectfactory.io]="f4cf8701f862612a8d2e17540a1bcf59";
  sites[til.io]="d7ccd588786e2149e86e8210d03a9b42";
  sites[tidydom.com]="b1a21884579fbd76193e3036223d248a";

  curl -X POST "https://api.cloudflare.com/client/v4/zones/$sites[$@]/purge_cache" \
     -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
     -H "Content-Type: application/json" \
     --data '{"purge_everything":true}'
}

# Git stuff
# Resets the timestamp for the most recent commit to the current time
touch_last_commit() {
  git commit --amend --date "`date -R`"
}

# Clean up already merged branches with a whitelist of branch names
cleanbranches() {
  if [ -z $1 ]; then
    echo "Must specify a branch!"
  elif git rev-parse --quiet --verify $1 > /dev/null; then
    git branch --merged $1 | awk '{$1=$1};1' | egrep "^(b\/|f\/|feature\/|bugfix\/)"  | xargs git branch -d
  else
    echo "Branch $1 does not exist in this repository."
  fi
}

# Aliases for cat / less / more to either jless or bat
maybejless() {
  if [[ $1 == *.json ]]; then
    jless ${@} || bat ${@}
  else
    bat ${@}
  fi
}
alias -g cat="maybejless"
alias -g more="maybejless"
alias -g less="maybejless"

## Shortcut to edit some config files
config() {
  if [ -r $HOME/.${@}rc ]; then maybechezmoi $HOME/.${@}rc
    elif [ -r $HOME/.config/$@/${@}.conf ]; then maybechezmoi $HOME/.config/$@/${@}.conf
    elif [ -r $HOME/.config/$@/.${@}.conf ]; then maybechezmoi $HOME/.config/$@/.${@}.conf
    elif [ -r $HOME/.config/$@.conf ]; then maybechezmoi $HOME/.config/$@.conf
    elif [ -r $HOME/.config/${@}.toml ]; then maybechezmoi $HOME/.config/${@}.toml
    elif [ -r $HOME/.config/$@/${@}.toml ]; then maybechezmoi $HOME/.config/$@/${@}.toml
    elif [ -r $HOME/${@} ]; then maybechezmoi $HOME/${@}

    else echo "Could not find config file."
  fi
}

maybechezmoi() {
  # Get a list of files managed by chezmoi
  MANAGED=(${(f)"$(chezmoi managed)"})
  BASENAME=${@//$HOME\//}
  # Check if the file is managed by chezmoi, otherwise just open in with vscode
  if [ ${MANAGED[(ie)$BASENAME]} -le ${#MANAGED} ]; then chezmoi edit $1
    else code $1
  fi
}

alias -g cz="chezmoi"
czd() {
    cd $(chezmoi source-path)
}

## tidyDOM - create a new template for issue documenation
mktemplate() {
  mkdir -p "./resources/views/accessibility/issues$(dirname $@)"
  cp "./resources/views/accessibility/issues/template.blade.php" "./resources/views/accessibility/issues$@"
  echo "./resources/views/accessibility/issues$@"
}

## Bitwarden get password and print to stdout
pw() {
  bw get password $@
}

## Bitwarden get password and copy to clipboard
pwcopy() {
  bw get password $@ | pbcopy
}

# open a lando database
ldb() {
  open `lando info --format=json -s database 2>/dev/null | jq -r '.[0] | "\(.type)://\(.creds.user):\(.creds.password)@\(.external_connection.host):\(.external_connection.port)/\(.creds.database)"'`
}

# BEGIN SNIPPET: Platform.sh CLI configuration
HOME=${HOME:-'/Users/jesse'}
export PATH="$HOME/"'.platformsh/bin':"$PATH"
if [ -f "$HOME/"'.platformsh/shell-config.rc' ]; then . "$HOME/"'.platformsh/shell-config.rc'; fi # END SNIPPET

#################
#   trace end   #
#################
# unsetopt xtrace
# zprof >! /tmp/zprof
# local line last
# while IFS= read -r line; do
#   if [[ ${line} =~ '^[0-9]+-_-' ]]; then
#     if [[ -n ${last} ]]; then
#       printf "%.6f %s\n" $(( (${line%%-_-*} - ${last%%-_-*}) / (10.0 ** 6) )) ${last#*-_-}
#     fi
#     last=${line}
#   fi
# done < /tmp/sample-time.(*).log > /tmp/ztrace.log
